# -*- coding: utf-8 -*-
"""ASSIGNMENT:Data Pipelines with Neo4j Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16OvCDqjpihLmbQrIwBVUl7fkZqv2U0X1

# **Data Pipelines with NEO4J**

**Background Information**

You have been hired by a telecommunications company that wants to optimize their business
processes. They have a Neo4j graph database that contains information about their customers,
their subscriptions, and the services they are using. However, they also want to store this data
in a more traditional relational database to allow for easier querying and analysis.meso They have
asked you to create a data pipeline that extracts data from their Neo4j database, transforms it
using pandas, and loads it into a Postgres database
"""

# intsall neo4j
!pip install neo4j

## Import required libraries
import pandas as pd
import psycopg2
from neo4j import GraphDatabase

#Set the connection details:

bolt_url = "neo4j+s://541730a0.databases.neo4j.io"
user = "neo4j"
password = "aw4iUmATYbzEjNR7AuCBcRTQl5nDPDV9ZoTSllI7AAU"

#Connect to the database:
driver = GraphDatabase.driver(bolt_url, auth=(user, password))

#Run a test query:
with driver.session() as session:
    result = session.run("RETURN 1")
    for record in result:
        print(record)

# Define Postgres connection details
pg_host = "105.198.57.213"
pg_database = "customer_data"
pg_user = "postgres"
pg_password = "Busaz"

# Define Neo4j query to extract data
neo4j_query = '''
MATCH (Customer_ID)-[:subscription]->(Subscription_ID)-[:Service]->(Service_ID)-[:start]->(Start)-[:End]->(End)-[:price]->(Price) 
RETURN Customer_ID, Subscription_ID, Service_ID, Start, End, Price 
'''

with driver.session() as session:
    result = session.run(neo4j_query)
    df = pd.DataFrame([r.values() for r in result], columns=result.keys())
    driver.close()

# Define function to extract data from Neo4j and return a Pandas DataFrame
def extract_data():
    # Connect to Neo4j
    driver = GraphDatabase.driver(bolt_url, auth=(user, password))
    #Create session
    session = driver.session()
    #run seesion to querry data
    results = session.run(neo4j_query)
    data = results.data()
    #convert the data to dataframe
    df = pd.DataFrame(data)
    
    
    return df

df

# Define function to transform data
def transform_data(df_transform):
# Convert date fields to datetime objects
 transform_data(df)['start_date'] = pd.to_datetime(transform_data(df)['start_date'])
 transform_data(df)['end_date'] = pd.to_datetime(transform_data(df)['end_date'])
# Remove null values
 transform_data(df).dropna(inplace=True)
 return df

# Define function to load data into Postgres
def load_data(df_1):
    # Connect to Postgres
    conn = psycopg2.connect(host=pg_host, database=pg_database, user=pg_user, password=pg_password)
    
    # Create a cursor object
    cur = conn.cursor()

    # Create a table to store the data
    cur.execute('CREATE TABLE IF NOT EXISTS Customer_Subscription (\
                 Customer_ID INT,\
                 Subscription_ID INT,\
                 Service_ID INT,\
                 Start_of_Subscription DATE,\
                 End_of_Subscription DATE,\
                 Price FLOAT\
                 )')

    # Insert the transformed data into the database
    for n, row in df_1.iterrows():
        cur.execute(f"INSERT INTO Customer_Subscription (Customer_ID, Subscription_ID, Service_ID, Start_of_Subscription, End_of_Subscription, Price) VALUES ({row['Customer_ID']}, {row['Subscription_ID']}, '{row['Service_ID']}', '{row['Start_of_Subscription']}', '{row['End_of_Subscription']}', {row['Price']})")

    # Commit the changes
    conn.commit()
     # Close the cursor and connection
    cur.close()
    conn.close()

# Define main function
def main():
     #Extract data from Neo4j
    df = extract_data()
    # Transform data using Pandas
    df_transform = transform_data(df)
      # Load data into Postgres
    load_data(df_1)
   
    
    
    
  
    

# Call main function
if __name__ == "__main__":
    main()